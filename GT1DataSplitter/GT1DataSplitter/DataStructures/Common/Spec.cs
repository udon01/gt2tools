using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using CsvHelper.Configuration;

namespace GT1.DataSplitter
{
    using Caches;
    using TypeConverters;

    public class Spec : CsvDataStructure<SpecData, SpecCSVMap>
    {
        public Spec()
        {
            Header = "SPEC";
            StringTableCount = 2;
        }

        public override void Read(Stream infile)
        {
            base.Read(infile);
            CarIDCache.Add(Encoding.ASCII.GetString(rawData[..5]));
        }

        protected override string CreateOutputFilename()
        {
            string filename = base.CreateOutputFilename();
            return filename.Replace(Path.GetExtension(filename), $"_{Encoding.ASCII.GetString(rawData[..5])}{Path.GetExtension(filename)}");
        }
    }

    [StructLayout(LayoutKind.Sequential, Pack = 1)] // 0x1A8
    public struct SpecData
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 6)]
        public byte[] Name;
        public ushort Unknown; // always 0x0100?
        public ushort Unknown2; // always 0x08D4?
        public ushort Unknown3; // always 0x08D4?
        public ushort Width;
        public ushort Height;
        public ushort Wheelbase;
        public byte Unknown4;
        public byte Unknown5;
        public ushort FrontTrack;
        public ushort RearTrack;
        public ushort ReverseGearRatio;
        public ushort FirstGearRatio;
        public ushort SecondGearRatio;
        public ushort ThirdGearRatio;
        public ushort FourthGearRatio;
        public ushort FifthGearRatio;
        public ushort SixthGearRatio;
        public ushort SeventhGearRatio;
        public ushort FinalDriveRatio;
        public byte NumberOfGears;
        public byte FlywheelInertia; // kg.m^2 - cannot be zero
        public byte EngineBraking; // kgfm
        public byte TurboLevel;
        public byte FrontBrakeLevel;
        public byte RearBrakeLevel;
        public byte PowerMultiplier; // 0x30
        public byte ShiftLimitRPM;
        public byte RevLimitRPM;
        public byte IdleRPMMaybe;
        public byte TorqueCurveRPM1;
        public byte TorqueCurveRPM2;
        public byte TorqueCurveRPM3;
        public byte TorqueCurveRPM4;
        public byte TorqueCurveRPM5;
        public byte TorqueCurveRPM6;
        public byte TorqueCurveRPM7;
        public byte TorqueCurveRPM8;
        public byte TorqueCurveRPM9;
        public byte TorqueCurveRPM10;
        public byte TorqueCurveRPM11;
        public byte TorqueCurveRPM12;
        public byte TorqueCurveRPM13;
        public byte TorqueCurveRPM14;
        public byte TorqueCurveRPM15;
        public byte TorqueCurveRPM16;
        public byte Unknown6;
        public byte Unknown7;
        public byte Unknown8;
        public byte Unknown9;
        public byte Unknown10;
        public byte Unknown11;
        public byte Unknown12;
        public byte Unknown13;
        public byte Unknown14;
        public byte Unknown15;
        public byte Unknown16;
        public byte Unknown17;
        public byte Unknown18; // 0x50
        public byte AWDMode;
        public byte Unknown19;
        public byte Unknown20;
        public byte Unknown21;
        public byte Unknown22;
        public byte TorqueCurvePoints;
        public byte Unknown23;
        public byte Unknown24;
        public byte Unknown25;
        public ushort Weight;
        public byte Unknown26;
        public byte ClutchReleaseRPMMaybe;
        public byte Unknown27;
        public byte Unknown28;
        public byte FrontBrakeTorque;
        public byte RearBrakeTorque;
        public byte Unknown29;
        public byte Unknown30; // brake-related?
        public byte FrontWheelInertia;
        public byte RearWheelInertia;
        public byte FrontWheelDiameterInches;
        public byte RearWheelDiameterInches;
        public byte FrontTireWidthMM;
        public byte RearTireWidthMM;
        public byte FrontTireProfile;
        public byte RearTireProfile;
        public byte FrontCamber;
        public byte RearCamber;
        public byte FrontSpringRate;
        public byte FrontStabilizer;
        public byte FrontBumpRubber; // 0x70
        public byte FrontUnknown1;
        public byte FrontUnknown2; // 0x00 in Suspension
        public byte FrontDamperBound;
        public byte FrontUnknown3; // 0x02 in Suspension
        public byte FrontDamperBound2Maybe;
        public byte FrontUnknown4; // 0x01 in Suspension
        public byte FrontDamperRebound;
        public byte FrontUnknown5; // 0x03 in Suspension
        public byte FrontDamperRebound2Maybe;
        public byte RearSpringRate;
        public byte RearStabilizer;
        public byte RearBumpRubber;
        public byte RearUnknown1;
        public byte RearUnknown2; // 0x05 in Suspension
        public byte RearDamperBound;
        public byte RearUnknown3; // 0x07 in Suspension
        public byte RearDamperBound2Maybe;
        public byte RearUnknown4; // 0x06 in Suspension
        public byte RearDamperRebound;
        public byte RearUnknown5; // 0x08 in Suspension
        public byte RearDamperRebound2Maybe;
        public byte FrontGrip;
        public byte RearGrip;
        public byte FrontDownforce;
        public byte RearDownforce;
        public byte Drivetrain; // 00 FR / 01 FF / 02 4WD / 03 MR
        public byte ClutchTorque; // kgfm
        public byte Unknown31;
        public byte Unknown32;
        public byte Unknown33;
        public byte Unknown34;
        public byte Unknown35; // 0x90
        public byte Unknown36;
        public byte Unknown37;
        public byte Unknown38;
        public byte Unknown39;
        public byte Unknown40;
        public byte Unknown41;
        public byte Unknown42;
        public byte Unknown43;
        public byte Unknown44;
        public byte Unknown45;
        public byte Unknown46;
        public byte Unknown47;
        public byte Unknown48;
        public byte Unknown49;
        public byte Unknown50;
        public byte Unknown51; // 0xA0
        public byte Unknown52;
        public byte Unknown53;
        public byte Unknown54;
        public byte Unknown55;
        public byte Unknown56;
        public byte Unknown57;
        public byte Unknown58;
        public byte Unknown59;
        public byte Unknown60;
        public byte Unknown61;
        public byte Unknown62;
        public byte Unknown63;
        public byte Unknown64;
        public byte Unknown65;
        public byte Unknown66;
        public byte Unknown67; // 0xB0
        public byte Unknown68;
        public byte Unknown69;
        public byte Unknown70;
        public byte Unknown71;
        public byte Unknown72;
        public byte Unknown73;
        public byte Unknown74;
        public byte Unknown75;
        public byte Unknown76;
        public byte Unknown77;
        public byte Unknown78;
        public byte Unknown79;
        public byte Unknown80;
        public byte Unknown81;
        public byte Unknown82;
        public byte Unknown83; // 0xC0
        public byte Unknown84;
        public byte Unknown85;
        public byte Unknown86;
        public byte Unknown87;
        public byte Unknown88;
        public byte Unknown89;
        public byte Unknown90;
        public byte Unknown91;
        public byte Unknown92;
        public byte Unknown93;
        public byte Unknown94;
        public byte Unknown95;
        public byte Unknown96;
        public byte Unknown97;
        public byte Unknown98;
        public byte Unknown99; // 0xD0
        public byte Unknown100;
        public byte Unknown101;
        public byte Unknown102;
        public byte Unknown103;
        public byte Unknown104;
        public byte Unknown105;
        public byte Unknown106;
        public byte Unknown107;
        public byte Unknown108;
        public byte Unknown109;
        public byte Unknown110;
        public byte Unknown111;
        public byte Unknown112;
        public byte Unknown113;
        public byte Unknown114;
        public byte Unknown115; // 0xE0
        public byte Unknown116;
        public byte Unknown117;
        public byte Unknown118;
        public byte Unknown119;
        public byte Unknown120;
        public byte Unknown121;
        public byte Unknown122;
        public byte Unknown123;
        public byte Unknown124;
        public byte Unknown125;
        public byte Unknown126;
        public byte Unknown127;
        public byte Unknown128;
        public byte Unknown129;
        public byte Unknown130;
        public byte Unknown131; // 0xF0
        public byte Unknown132;
        public byte Unknown133;
        public byte Unknown134;
        public byte Unknown135;
        public byte Unknown136;
        public byte Unknown137;
        public byte Unknown138;
        public byte Unknown139;
        public byte Unknown140;
        public byte Unknown141;
        public byte Unknown142;
        public byte Unknown143;
        public byte Unknown144;
        public byte Unknown145;
        public byte Unknown146;
        public byte Unknown147; // 0x100
        public byte Unknown148;
        public byte Unknown149;
        public byte Unknown150;
        public byte Unknown151;
        public byte Unknown152;
        public byte Unknown153;
        public byte Unknown154;
        public byte Unknown155;
        public byte Unknown156;
        public byte Unknown157;
        public byte Unknown158;
        public byte Unknown159;
        public byte Unknown160;
        public byte Unknown161;
        public byte Unknown162;
        public byte Unknown163; // 0x110
        public byte Unknown164;
        public byte Unknown165;
        public byte Unknown166;
        public byte Unknown167;
        public byte Unknown168;
        public byte FrontRideHeight;
        public byte RearRideHeight;
        public byte Unknown169;
        public byte AWDTorqueSplit;
        public byte Unknown171;
        public byte Unknown172;
        public byte Unknown173;
        public byte Unknown174;
        public byte Unknown175;
        public byte Unknown176;
        public byte Unknown177;
        public byte Unknown178;
        public byte Unknown179;
        public byte Unknown180;
        public byte Unknown181;
        public byte Unknown182;
        public byte Unknown183;
        public byte Unknown184;
        public byte Unknown185;
        public byte Unknown186;
        public byte Unknown187;
        public byte Unknown188;
        public byte Unknown189;
        public byte Unknown190;
        public byte Unknown191;
        public byte Unknown192;
        public byte Unknown193; // 0x130
        public byte Unknown194;
        public byte Unknown195;
        public byte Unknown196;
        public byte Unknown197;
        public byte Unknown198;
        public byte Unknown199;
        public byte Unknown201;
        public byte Unknown202;
        public byte Unknown203;
        public byte Unknown204;
        public byte Unknown205;
        public byte Unknown206;
        public byte Unknown207;
        public ushort TorqueCurve1;
        public ushort TorqueCurve2;
        public ushort TorqueCurve3;
        public ushort TorqueCurve4;
        public ushort TorqueCurve5;
        public ushort TorqueCurve6;
        public ushort TorqueCurve7;
        public ushort TorqueCurve8;
        public ushort TorqueCurve9;
        public ushort TorqueCurve10; // 0x150
        public ushort TorqueCurve11;
        public ushort TorqueCurve12;
        public ushort TorqueCurve13;
        public ushort TorqueCurve14;
        public ushort TorqueCurve15;
        public ushort TorqueCurve16;
        public byte Unknown208; // start of 16 similar bytes - related to torque curve?
        public byte Unknown209;
        public byte Unknown210;
        public byte Unknown211;
        public byte Unknown212;
        public byte Unknown213;
        public byte Unknown214;
        public byte Unknown215;
        public byte Unknown216;
        public byte Unknown217;
        public byte Unknown218;
        public byte Unknown219;
        public byte Unknown220;
        public byte Unknown221;
        public byte Unknown222;
        public byte Unknown223; // end of 16 similar bytes
        public ushort Unknown224;
        public byte Unknown225; // 0x170
        public byte Unknown226;
        public byte Unknown227;
        public byte Unknown228;
        public byte Unknown229;
        public byte Unknown230;
        public ushort EngineSound;
        public byte TurboUnknown1;
        public byte TurboUnknown2;
        public byte TurboUnknown3;
        public byte TurboUnknown4;
        public byte TurboUnknown5;
        public byte TurboUnknown6;
        public ushort Unknown231;
        public ushort MufflerSound;
        public ushort Unknown232;
        public uint Price;
        public ushort NamePart1;
        public ushort StringTablePart1;
        public ushort NamePart2;
        public ushort StringTablePart2;
        public ushort Suspension; // 0x190
        public ushort Tire;
        public ushort Length;
        public ushort Displacement;
        public ushort Power;
        public ushort PowerRPM;
        public ushort Torque;
        public ushort TorqueRPM;
        public byte NewOrUsed; // 30 new / 31 used
        public byte IsRacing; // 00 normal / 01 racing
        public byte UnknownFlag;
        public byte Aspiration; // 00 normal / 01 turbo / 02 mechanical
        public byte EngineValvetrain; // 00 SOHC / 01 DOHC / 02 OHV / 03 Rotary
        public byte EngineLayout; // 00 L4 / 01 L6 / 02 V6 / 03 V8 / 04 V10 / 05 RE / 06 Boxer4 / 07 Boxer6
        public byte FrontSuspensionType; // 00 strut / 01 trailing torsion beam / 02 double wishbone / 03 multilink / 04 parallel-link strut? / 05 multilink beam? / 06 macpherson strut? / 07 semi-trailing arm? / 08 torque arm
        public byte RearSuspensionType;
    }

    public sealed class SpecCSVMap : ClassMap<SpecData>
    {
        public SpecCSVMap(List<List<string>> tables)
        {
            Map(m => m.Name).TypeConverter(new HexStringConverter(6));
            Map(m => m.Unknown).Convert(args => 256).Ignore();
            Map(m => m.Unknown2).Convert(args => 2260).Ignore();
            Map(m => m.Unknown3).Convert(args => 2260).Ignore();
            Map(m => m.Width);
            Map(m => m.Height);
            Map(m => m.Wheelbase);
            Map(m => m.Unknown4);
            Map(m => m.Unknown5).Convert(args => 60).Ignore();
            Map(m => m.FrontTrack);
            Map(m => m.RearTrack);
            Map(m => m.ReverseGearRatio);
            Map(m => m.FirstGearRatio);
            Map(m => m.SecondGearRatio);
            Map(m => m.ThirdGearRatio);
            Map(m => m.FourthGearRatio);
            Map(m => m.FifthGearRatio);
            Map(m => m.SixthGearRatio);
            Map(m => m.SeventhGearRatio);
            Map(m => m.FinalDriveRatio);
            Map(m => m.NumberOfGears);
            Map(m => m.FlywheelInertia);
            Map(m => m.EngineBraking);
            Map(m => m.TurboLevel);
            Map(m => m.FrontBrakeLevel);
            Map(m => m.RearBrakeLevel);
            Map(m => m.PowerMultiplier);
            Map(m => m.ShiftLimitRPM);
            Map(m => m.RevLimitRPM);
            Map(m => m.IdleRPMMaybe);
            Map(m => m.TorqueCurveRPM1);
            Map(m => m.TorqueCurveRPM2);
            Map(m => m.TorqueCurveRPM3);
            Map(m => m.TorqueCurveRPM4);
            Map(m => m.TorqueCurveRPM5);
            Map(m => m.TorqueCurveRPM6);
            Map(m => m.TorqueCurveRPM7);
            Map(m => m.TorqueCurveRPM8);
            Map(m => m.TorqueCurveRPM9);
            Map(m => m.TorqueCurveRPM10);
            Map(m => m.TorqueCurveRPM11);
            Map(m => m.TorqueCurveRPM12);
            Map(m => m.TorqueCurveRPM13);
            Map(m => m.TorqueCurveRPM14);
            Map(m => m.TorqueCurveRPM15);
            Map(m => m.TorqueCurveRPM16);
            Map(m => m.Unknown6).Convert(args => 6).Ignore();
            Map(m => m.Unknown7);
            Map(m => m.Unknown8).Convert(args => 32).Ignore();
            Map(m => m.Unknown9).Convert(args => 80).Ignore();
            Map(m => m.Unknown10).Convert(args => 140).Ignore();
            Map(m => m.Unknown11).Convert(args => 202).Ignore();
            Map(m => m.Unknown12).Convert(args => 255).Ignore();
            Map(m => m.Unknown13).Convert(args => 255).Ignore();
            Map(m => m.Unknown14).Convert(args => 98).Ignore();
            Map(m => m.Unknown15).Convert(args => 50).Ignore();
            Map(m => m.Unknown16).Convert(args => 30).Ignore();
            Map(m => m.Unknown17).Convert(args => 22).Ignore();
            Map(m => m.Unknown18).Convert(args => 19).Ignore();
            Map(m => m.AWDMode);
            Map(m => m.Unknown19).Convert(args => 10).Ignore();
            Map(m => m.Unknown20).Convert(args => 10).Ignore();
            Map(m => m.Unknown21).Convert(args => 100).Ignore();
            Map(m => m.Unknown22).Convert(args => 100).Ignore();
            Map(m => m.TorqueCurvePoints);
            Map(m => m.Unknown23).Convert(args => 48).Ignore();
            Map(m => m.Unknown24).Convert(args => 90).Ignore();
            Map(m => m.Unknown25).Convert(args => 30).Ignore();
            Map(m => m.Weight);
            Map(m => m.Unknown26).Convert(args => 60).Ignore();
            Map(m => m.ClutchReleaseRPMMaybe);
            Map(m => m.Unknown27).Convert(args => 45).Ignore();
            Map(m => m.Unknown28).Convert(args => 45).Ignore();
            Map(m => m.FrontBrakeTorque);
            Map(m => m.RearBrakeTorque);
            Map(m => m.Unknown29);
            Map(m => m.Unknown30);
            Map(m => m.FrontWheelInertia);
            Map(m => m.RearWheelInertia);
            Map(m => m.FrontWheelDiameterInches);
            Map(m => m.RearWheelDiameterInches);
            Map(m => m.FrontTireWidthMM).TypeConverter(new TireWidthConverter());
            Map(m => m.RearTireWidthMM).TypeConverter(new TireWidthConverter());
            Map(m => m.FrontTireProfile).TypeConverter(new TireProfileConverter());
            Map(m => m.RearTireProfile).TypeConverter(new TireProfileConverter());
            Map(m => m.FrontCamber);
            Map(m => m.RearCamber);
            Map(m => m.FrontSpringRate);
            Map(m => m.FrontStabilizer);
            Map(m => m.FrontBumpRubber);
            Map(m => m.FrontUnknown1);
            Map(m => m.FrontUnknown2);
            Map(m => m.FrontDamperBound);
            Map(m => m.FrontUnknown3);
            Map(m => m.FrontDamperBound2Maybe);
            Map(m => m.FrontUnknown4);
            Map(m => m.FrontDamperRebound);
            Map(m => m.FrontUnknown5);
            Map(m => m.FrontDamperRebound2Maybe);
            Map(m => m.RearSpringRate);
            Map(m => m.RearStabilizer);
            Map(m => m.RearBumpRubber);
            Map(m => m.RearUnknown1);
            Map(m => m.RearUnknown2);
            Map(m => m.RearDamperBound);
            Map(m => m.RearUnknown3);
            Map(m => m.RearDamperBound2Maybe);
            Map(m => m.RearUnknown4);
            Map(m => m.RearDamperRebound);
            Map(m => m.RearUnknown5);
            Map(m => m.RearDamperRebound2Maybe);
            Map(m => m.FrontGrip);
            Map(m => m.RearGrip);
            Map(m => m.FrontDownforce);
            Map(m => m.RearDownforce);
            Map(m => m.Drivetrain);
            Map(m => m.ClutchTorque);
            Map(m => m.Unknown31);
            Map(m => m.Unknown32);
            Map(m => m.Unknown33).Convert(args => 8).Ignore();
            Map(m => m.Unknown34).Convert(args => 0).Ignore();
            Map(m => m.Unknown35).Convert(args => 12).Ignore();
            Map(m => m.Unknown36).Convert(args => 18).Ignore();
            Map(m => m.Unknown37).Convert(args => 24).Ignore();
            Map(m => m.Unknown38).Convert(args => 32).Ignore();
            Map(m => m.Unknown39).Convert(args => 43).Ignore();
            Map(m => m.Unknown40).Convert(args => 133).Ignore();
            Map(m => m.Unknown41).Convert(args => 255).Ignore();
            Map(m => m.Unknown42).Convert(args => 0).Ignore();
            Map(m => m.Unknown43);
            Map(m => m.Unknown44);
            Map(m => m.Unknown45);
            Map(m => m.Unknown46);
            Map(m => m.Unknown47);
            Map(m => m.Unknown48).Convert(args => 230).Ignore();
            Map(m => m.Unknown49).Convert(args => 230).Ignore();
            Map(m => m.Unknown50).Convert(args => 8).Ignore();
            Map(m => m.Unknown51).Convert(args => 0).Ignore();
            Map(m => m.Unknown52).Convert(args => 12).Ignore();
            Map(m => m.Unknown53).Convert(args => 18).Ignore();
            Map(m => m.Unknown54).Convert(args => 24).Ignore();
            Map(m => m.Unknown55).Convert(args => 32).Ignore();
            Map(m => m.Unknown56).Convert(args => 43).Ignore();
            Map(m => m.Unknown57).Convert(args => 133).Ignore();
            Map(m => m.Unknown58).Convert(args => 255).Ignore();
            Map(m => m.Unknown59).Convert(args => 0).Ignore();
            Map(m => m.Unknown60);
            Map(m => m.Unknown61);
            Map(m => m.Unknown62);
            Map(m => m.Unknown63);
            Map(m => m.Unknown64);
            Map(m => m.Unknown65).Convert(args => 230).Ignore();
            Map(m => m.Unknown66).Convert(args => 230).Ignore();
            Map(m => m.Unknown67).Convert(args => 6).Ignore();
            Map(m => m.Unknown68).Convert(args => 0).Ignore();
            Map(m => m.Unknown69).Convert(args => 15).Ignore();
            Map(m => m.Unknown70).Convert(args => 25).Ignore();
            Map(m => m.Unknown71).Convert(args => 70).Ignore();
            Map(m => m.Unknown72).Convert(args => 122).Ignore();
            Map(m => m.Unknown73).Convert(args => 255).Ignore();
            Map(m => m.Unknown74).Convert(args => 0).Ignore();
            Map(m => m.Unknown75).Convert(args => 160).Ignore();
            Map(m => m.Unknown76).Convert(args => 200).Ignore();
            Map(m => m.Unknown77).Convert(args => 200).Ignore();
            Map(m => m.Unknown78).Convert(args => 164).Ignore();
            Map(m => m.Unknown79).Convert(args => 96).Ignore();
            Map(m => m.Unknown80);
            Map(m => m.Unknown81);
            Map(m => m.Unknown82);
            Map(m => m.Unknown83);
            Map(m => m.Unknown84);
            Map(m => m.Unknown85).Convert(args => 60).Ignore();
            Map(m => m.Unknown86).Convert(args => 6).Ignore();
            Map(m => m.Unknown87).Convert(args => 0).Ignore();
            Map(m => m.Unknown88).Convert(args => 11).Ignore();
            Map(m => m.Unknown89);
            Map(m => m.Unknown90).Convert(args => 110).Ignore();
            Map(m => m.Unknown91).Convert(args => 170).Ignore();
            Map(m => m.Unknown92).Convert(args => 255).Ignore();
            Map(m => m.Unknown93).Convert(args => 0).Ignore();
            Map(m => m.Unknown94).Convert(args => 156).Ignore();
            Map(m => m.Unknown95);
            Map(m => m.Unknown96);
            Map(m => m.Unknown97);
            Map(m => m.Unknown98).Convert(args => 108).Ignore();
            Map(m => m.Unknown99);
            Map(m => m.Unknown100);
            Map(m => m.Unknown101);
            Map(m => m.Unknown102);
            Map(m => m.Unknown103).Convert(args => 124).Ignore();
            Map(m => m.Unknown104).Convert(args => 52).Ignore();
            Map(m => m.Unknown105).Convert(args => 6).Ignore();
            Map(m => m.Unknown106).Convert(args => 0).Ignore();
            Map(m => m.Unknown107).Convert(args => 15).Ignore();
            Map(m => m.Unknown108).Convert(args => 25).Ignore();
            Map(m => m.Unknown109).Convert(args => 42).Ignore();
            Map(m => m.Unknown110).Convert(args => 78).Ignore();
            Map(m => m.Unknown111).Convert(args => 255).Ignore();
            Map(m => m.Unknown112).Convert(args => 0).Ignore();
            Map(m => m.Unknown113);
            Map(m => m.Unknown114);
            Map(m => m.Unknown115);
            Map(m => m.Unknown116);
            Map(m => m.Unknown117).Convert(args => 124).Ignore();
            Map(m => m.Unknown118);
            Map(m => m.Unknown119);
            Map(m => m.Unknown120).Convert(args => 183).Ignore();
            Map(m => m.Unknown121);
            Map(m => m.Unknown122);
            Map(m => m.Unknown123).Convert(args => 12).Ignore();
            Map(m => m.Unknown124).Convert(args => 6).Ignore();
            Map(m => m.Unknown125).Convert(args => 0).Ignore();
            Map(m => m.Unknown126).Convert(args => 11).Ignore();
            Map(m => m.Unknown127);
            Map(m => m.Unknown128).Convert(args => 118).Ignore();
            Map(m => m.Unknown129).Convert(args => 182).Ignore();
            Map(m => m.Unknown130).Convert(args => 255).Ignore();
            Map(m => m.Unknown131).Convert(args => 0).Ignore();
            Map(m => m.Unknown132);
            Map(m => m.Unknown133);
            Map(m => m.Unknown134);
            Map(m => m.Unknown135).Convert(args => 148).Ignore();
            Map(m => m.Unknown136).Convert(args => 80).Ignore();
            Map(m => m.Unknown137);
            Map(m => m.Unknown138);
            Map(m => m.Unknown139);
            Map(m => m.Unknown140);
            Map(m => m.Unknown141).Convert(args => 136).Ignore();
            Map(m => m.Unknown142).Convert(args => 64).Ignore();
            Map(m => m.Unknown143).Convert(args => 6).Ignore();
            Map(m => m.Unknown144).Convert(args => 0).Ignore();
            Map(m => m.Unknown145).Convert(args => 4).Ignore();
            Map(m => m.Unknown146).Convert(args => 14).Ignore();
            Map(m => m.Unknown147).Convert(args => 48).Ignore();
            Map(m => m.Unknown148).Convert(args => 60).Ignore();
            Map(m => m.Unknown149).Convert(args => 81).Ignore();
            Map(m => m.Unknown150).Convert(args => 0).Ignore();
            Map(m => m.Unknown151).Convert(args => 34).Ignore();
            Map(m => m.Unknown152).Convert(args => 41).Ignore();
            Map(m => m.Unknown153).Convert(args => 50).Ignore();
            Map(m => m.Unknown154).Convert(args => 83).Ignore();
            Map(m => m.Unknown155).Convert(args => 255).Ignore();
            Map(m => m.Unknown156).Convert(args => 6).Ignore();
            Map(m => m.Unknown157).Convert(args => 0).Ignore();
            Map(m => m.Unknown158).Convert(args => 4).Ignore();
            Map(m => m.Unknown159).Convert(args => 14).Ignore();
            Map(m => m.Unknown160).Convert(args => 48).Ignore();
            Map(m => m.Unknown161).Convert(args => 60).Ignore();
            Map(m => m.Unknown162).Convert(args => 81).Ignore();
            Map(m => m.Unknown163).Convert(args => 0).Ignore();
            Map(m => m.Unknown164);
            Map(m => m.Unknown165);
            Map(m => m.Unknown166);
            Map(m => m.Unknown167);
            Map(m => m.Unknown168).Convert(args => 255).Ignore();
            Map(m => m.FrontRideHeight);
            Map(m => m.RearRideHeight);
            Map(m => m.Unknown169).Convert(args => 13).Ignore();
            Map(m => m.AWDTorqueSplit);
            Map(m => m.Unknown171).Convert(args => 4).Ignore();
            Map(m => m.Unknown172).Convert(args => 0).Ignore();
            Map(m => m.Unknown173).Convert(args => 52).Ignore();
            Map(m => m.Unknown174).Convert(args => 100).Ignore();
            Map(m => m.Unknown175).Convert(args => 200).Ignore();
            Map(m => m.Unknown176).Convert(args => 200).Ignore();
            Map(m => m.Unknown177).Convert(args => 240).Ignore();
            Map(m => m.Unknown178).Convert(args => 235).Ignore();
            Map(m => m.Unknown179).Convert(args => 198).Ignore();
            Map(m => m.Unknown180).Convert(args => 4).Ignore();
            Map(m => m.Unknown181).Convert(args => 0).Ignore();
            Map(m => m.Unknown182).Convert(args => 52).Ignore();
            Map(m => m.Unknown183).Convert(args => 100).Ignore();
            Map(m => m.Unknown184).Convert(args => 200).Ignore();
            Map(m => m.Unknown185).Convert(args => 200).Ignore();
            Map(m => m.Unknown186).Convert(args => 240).Ignore();
            Map(m => m.Unknown187).Convert(args => 235).Ignore();
            Map(m => m.Unknown188).Convert(args => 198).Ignore();
            Map(m => m.Unknown189).Convert(args => 4).Ignore();
            Map(m => m.Unknown190).Convert(args => 0).Ignore();
            Map(m => m.Unknown191).Convert(args => 130).Ignore();
            Map(m => m.Unknown192).Convert(args => 164).Ignore();
            Map(m => m.Unknown193).Convert(args => 255).Ignore();
            Map(m => m.Unknown194).Convert(args => 200).Ignore();
            Map(m => m.Unknown195).Convert(args => 172).Ignore();
            Map(m => m.Unknown196).Convert(args => 166).Ignore();
            Map(m => m.Unknown197).Convert(args => 148).Ignore();
            Map(m => m.Unknown198).Convert(args => 4).Ignore();
            Map(m => m.Unknown199).Convert(args => 0).Ignore();
            Map(m => m.Unknown201).Convert(args => 130).Ignore();
            Map(m => m.Unknown202).Convert(args => 164).Ignore();
            Map(m => m.Unknown203).Convert(args => 255).Ignore();
            Map(m => m.Unknown204).Convert(args => 200).Ignore();
            Map(m => m.Unknown205).Convert(args => 172).Ignore();
            Map(m => m.Unknown206).Convert(args => 166).Ignore();
            Map(m => m.Unknown207).Convert(args => 148).Ignore();
            Map(m => m.TorqueCurve1);
            Map(m => m.TorqueCurve2);
            Map(m => m.TorqueCurve3);
            Map(m => m.TorqueCurve4);
            Map(m => m.TorqueCurve5);
            Map(m => m.TorqueCurve6);
            Map(m => m.TorqueCurve7);
            Map(m => m.TorqueCurve8);
            Map(m => m.TorqueCurve9);
            Map(m => m.TorqueCurve10);
            Map(m => m.TorqueCurve11);
            Map(m => m.TorqueCurve12);
            Map(m => m.TorqueCurve13);
            Map(m => m.TorqueCurve14);
            Map(m => m.TorqueCurve15);
            Map(m => m.TorqueCurve16);
            Map(m => m.Unknown208);
            Map(m => m.Unknown209);
            Map(m => m.Unknown210);
            Map(m => m.Unknown211);
            Map(m => m.Unknown212);
            Map(m => m.Unknown213);
            Map(m => m.Unknown214);
            Map(m => m.Unknown215);
            Map(m => m.Unknown216);
            Map(m => m.Unknown217);
            Map(m => m.Unknown218);
            Map(m => m.Unknown219);
            Map(m => m.Unknown220);
            Map(m => m.Unknown221);
            Map(m => m.Unknown222);
            Map(m => m.Unknown223);
            Map(m => m.Unknown224);
            Map(m => m.Unknown225);
            Map(m => m.Unknown226);
            Map(m => m.Unknown227);
            Map(m => m.Unknown228);
            Map(m => m.Unknown229);
            Map(m => m.Unknown230);
            Map(m => m.EngineSound);
            Map(m => m.TurboUnknown1);
            Map(m => m.TurboUnknown2);
            Map(m => m.TurboUnknown3);
            Map(m => m.TurboUnknown4);
            Map(m => m.TurboUnknown5);
            Map(m => m.TurboUnknown6);
            Map(m => m.Unknown231).Convert(args => 0).Ignore();
            Map(m => m.MufflerSound);
            Map(m => m.Unknown232).Convert(args => 0).Ignore();
            Map(m => m.Price);
            Map(m => m.NamePart1).TypeConverter(new StringTableLookup(tables[0]));
            Map(m => m.StringTablePart1).Convert(args => 0).Ignore();
            Map(m => m.NamePart2).TypeConverter(new StringTableLookup(tables[1]));
            Map(m => m.StringTablePart2).Convert(args => 1).Ignore();
            Map(m => m.Suspension).PartFilename(nameof(Suspension));
            Map(m => m.Tire).PartFilename(nameof(Tire));
            Map(m => m.Length);
            Map(m => m.Displacement);
            Map(m => m.Power);
            Map(m => m.PowerRPM);
            Map(m => m.Torque);
            Map(m => m.TorqueRPM);
            Map(m => m.NewOrUsed);
            Map(m => m.IsRacing);
            Map(m => m.UnknownFlag);
            Map(m => m.Aspiration);
            Map(m => m.EngineValvetrain);
            Map(m => m.EngineLayout);
            Map(m => m.FrontSuspensionType);
            Map(m => m.RearSuspensionType);
        }
    }
}